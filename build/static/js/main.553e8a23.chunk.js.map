{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ChooseDifficulty","props","react_default","a","createElement","className","style","visibility","isDifficultyVisible","type","name","id","value","onChange","difficultyOnChange","htmlFor","disabled","isButtonEnabled","onClick","buttonOnClick","Card","cardProperties","concat","numberOfCards","opened","order","positionOnField","hidden","src","alt","hiddenValue","Timer","timerValue","CardsContainer12","cardsPropertiesStart","Array","fill","map","_","index","Math","floor","random","cardsPropertiesNew","_useState","useState","_useState2","Object","slicedToArray","cardsProperties","setCardsProperties","_useState3","_useState4","fieldIsLocked","setFieldIsLocked","hideCards","setTimeout","cardsForHide","getOpenedCards","forEach","card","filter","length","setTimerIsActive","cardOnClick","toConsumableArray","isCardOpened","areOpenedCardsEqual","openedCards","App_Timer","App_Card","key","CardsContainer20","_useState5","_useState6","_useState7","_useState8","CardsContainer30","_useState9","_useState10","_useState11","_useState12","App","_useState13","_useState14","setButtonEnabled","_useState15","_useState16","setDifficultyVisible","_useState17","_useState18","setNumberOfCards","_useState19","Date","_useState20","timeOfStart","setTimeOfStart","_useState21","_useState22","timerIsActive","_useState23","_useState24","setTimerValue","useEffect","timerId","secondsForTimer","round","minutes","seconds","clearTimeout","Fragment","App_CardsContainer12","App_CardsContainer20","App_CardsContainer30","App_ChooseDifficulty","parseInt","document","querySelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.553e8a23.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst ChooseDifficulty = (props) => {\n  return (\n    <div className = \"modal\" style = {{visibility: props.isDifficultyVisible ? \"visible\" : \"hidden\",}}>\n      <div className = \"modalContent\">\n        <p>Please, choose a level:</p>\n        <div className = \"radioContainer\">\n            <input type = \"radio\" name = \"difficulty\" id = \"Easy\" value = \"12\" onChange = {props.difficultyOnChange}>\n            </input>\n            <label htmlFor = \"Easy\">Easy</label>\n        </div>\n        <div className = \"radioContainer\">\n            <input type = \"radio\" name = \"difficulty\" id = \"Medium\" value = \"20\" onChange = {props.difficultyOnChange}>\n            </input>\n            <label htmlFor=\"Medium\">Medium</label>\n        </div>\n        <div className=\"radioContainer\">\n            <input type=\"radio\" name=\"difficulty\" id=\"Hard\" value=\"30\" onChange = {props.difficultyOnChange}>\n            </input>\n            <label htmlFor=\"Hard\">Hard</label>\n        </div>\n          <input type=\"submit\" value=\"Start\" id=\"submit\" disabled = {!props.isButtonEnabled} onClick = {props.buttonOnClick}>\n          </input>\n      </div>\n    </div>\n  )\n}\n\nconst Card = (props) => {\n  return (\n    <div\n      id = {props.cardProperties.id}\n      className = {`cards${props.numberOfCards} card` + (props.cardProperties.opened?\" flip\":\" scale\")}\n      onClick = {() => props.onClick(props.cardProperties.id)}\n      style = {{\n        order: props.cardProperties.positionOnField,\n        visibility: props.cardProperties.hidden ? \"hidden\" : \"visible\",\n      }}\n    >\n      <img src=  \"img/js-badge.svg\" alt = {props.cardProperties.id} className = \"backImg\"/>\n      <img src={`img/${props.cardProperties.hiddenValue}.svg`} alt = {props.cardProperties.id} className = \"frontImg\"/>\n    </div>\n  );\n}\n\nconst Timer = (props) => {\n  return (\n    <div id=\"timer\">{props.timerValue}</div>\n  )\n}\n\n\n\nconst CardsContainer12 = (props) => {\n  const cardsPropertiesStart = Array(12).fill(0).map((_, index) => ({\n    id:index,\n    hiddenValue:Math.floor(index/2),\n    hidden:false,\n    opened:false,\n    positionOnField:Math.floor(Math.random()*50)\n  }));\n\n  let cardsPropertiesNew = [];\n\n  const [cardsProperties, setCardsProperties] = useState(cardsPropertiesStart);\n\n  const [fieldIsLocked, setFieldIsLocked] = useState(false);\n\n  const getVisibleCardsNum = () => cardsPropertiesNew.filter(card => !(card.hidden)).length;\n\n  const hideCards = () => {\n    setTimeout(() => {\n      const cardsForHide = getOpenedCards();\n      cardsForHide.forEach(card => card.hidden = true);\n      cardsForHide.forEach(card => card.opened = false);\n      setCardsProperties(cardsPropertiesNew);\n      if (!getVisibleCardsNum()) props.setTimerIsActive(false);\n      setFieldIsLocked(false);\n    }, 1000);\n  }\n\n  const isCardOpened = (id) => cardsPropertiesNew[id].opened;\n\n  const cardOnClick = (id) => {\n    if (fieldIsLocked) return; \n    cardsPropertiesNew = [...cardsProperties];\n    switch (getOpenedCards().length) {\n      case 0:\n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        return;\n      case 1:\n        if (isCardOpened(id)) return; \n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        setFieldIsLocked(true);\n        if(areOpenedCardsEqual()) {\n          hideCards();\n          return;\n        };\n        setTimeout(() => {\n          getOpenedCards().forEach(card => card.opened = false);\n          setCardsProperties(cardsPropertiesNew);\n          setFieldIsLocked(false);\n        }, 600);\n        return;\n      default:\n        return;\n    }\n  }\n\n  const getOpenedCards = () => (cardsPropertiesNew.filter(card => card.opened));\n\n  const areOpenedCardsEqual = () => {\n    const openedCards = getOpenedCards();\n    return openedCards[0].hiddenValue === openedCards[1].hiddenValue;\n  };\n\n  return (\n    <main id = \"cardsContainer\">\n      <div id = \"innerContainer\">\n      <Timer \n        timerValue = {props.timerValue}\n      />\n        {cardsProperties.map((cardProperties, index) =>(\n          <Card\n            key = {index}\n            cardProperties = {cardProperties}\n            onClick = {(id) => cardOnClick(id)}\n            numberOfCards = {12}\n          />\n        ))}\n      </div>\n    </main>\n  );\n}\n\n const CardsContainer20 = (props) => {\n  const cardsPropertiesStart = Array(20).fill(0).map((_, index) => ({\n    id:index,\n    hiddenValue:Math.floor(index/2),\n    hidden:false,\n    opened:false,\n    positionOnField:Math.floor(Math.random()*50)\n  }));\n\n  let cardsPropertiesNew = [];\n\n  const [cardsProperties, setCardsProperties] = useState(cardsPropertiesStart);\n\n  const [fieldIsLocked, setFieldIsLocked] = useState(false);\n\n  const getVisibleCardsNum = () => cardsPropertiesNew.filter(card => !(card.hidden)).length;\n\n  const hideCards = () => {\n    setTimeout(() => {\n      const cardsForHide = getOpenedCards();\n      cardsForHide.forEach(card => card.hidden = true);\n      cardsForHide.forEach(card => card.opened = false);\n      setCardsProperties(cardsPropertiesNew);\n      if (!getVisibleCardsNum()) props.setTimerIsActive(false);\n      setFieldIsLocked(false);\n    }, 1000);\n  }\n\n  const isCardOpened = (id) => cardsPropertiesNew[id].opened;\n\n  const cardOnClick = (id) => {\n    if (fieldIsLocked) return; \n    cardsPropertiesNew = [...cardsProperties];\n    switch (getOpenedCards().length) {\n      case 0:\n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        return;\n      case 1:\n        if (isCardOpened(id)) return; \n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        setFieldIsLocked(true);\n        if(areOpenedCardsEqual()) {\n          hideCards();\n          return;\n        };\n        setTimeout(() => {\n          getOpenedCards().forEach(card => card.opened = false);\n          setCardsProperties(cardsPropertiesNew);\n          setFieldIsLocked(false);\n        }, 600);\n        return;\n      default:\n        return;\n    }\n  }\n\n  const getOpenedCards = () => (cardsPropertiesNew.filter(card => card.opened));\n\n  const areOpenedCardsEqual = () => {\n    const openedCards = getOpenedCards();\n    return openedCards[0].hiddenValue === openedCards[1].hiddenValue;\n  };\n\n  return (\n    <main id = \"cardsContainer\">\n      <div id = \"innerContainer\">\n      <Timer timerValue = {props.timerValue}/>\n        {cardsProperties.map((cardProperties, index) =>(\n          <Card\n            key = {index}\n            cardProperties = {cardProperties}\n            onClick = {(id) => cardOnClick(id)}\n            numberOfCards = {20}\n          />\n        ))}\n       </div>\n     </main>\n   )\n }\n\n const CardsContainer30 = (props) => {\n  const cardsPropertiesStart = Array(30).fill(0).map((_, index) => ({\n    id:index,\n    hiddenValue:Math.floor(index/2),\n    hidden:false,\n    opened:false,\n    positionOnField:Math.floor(Math.random()*50)\n  }));\n\n  let cardsPropertiesNew = [];\n\n  const [cardsProperties, setCardsProperties] = useState(cardsPropertiesStart);\n\n  const [fieldIsLocked, setFieldIsLocked] = useState(false);\n\n  const getVisibleCardsNum = () => cardsPropertiesNew.filter(card => !(card.hidden)).length;\n\n  const hideCards = () => {\n    setTimeout(() => {\n      const cardsForHide = getOpenedCards();\n      cardsForHide.forEach(card => card.hidden = true);\n      cardsForHide.forEach(card => card.opened = false);\n      setCardsProperties(cardsPropertiesNew);\n      if (!getVisibleCardsNum()) props.setTimerIsActive(false);\n      setFieldIsLocked(false);\n    }, 1000);\n  }\n\n  const isCardOpened = (id) => cardsPropertiesNew[id].opened;\n\n  const cardOnClick = (id) => {\n    if (fieldIsLocked) return; \n    cardsPropertiesNew = [...cardsProperties];\n    switch (getOpenedCards().length) {\n      case 0:\n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        return;\n      case 1:\n        if (isCardOpened(id)) return; \n        cardsPropertiesNew[id].opened = true;\n        setCardsProperties(cardsPropertiesNew);\n        setFieldIsLocked(true);\n        if(areOpenedCardsEqual()) {\n          hideCards();\n          return;\n        };\n        setTimeout(() => {\n          getOpenedCards().forEach(card => card.opened = false);\n          setCardsProperties(cardsPropertiesNew);\n          setFieldIsLocked(false);\n        }, 600);\n        return;\n      default:\n        return;\n    }\n  }\n\n  const getOpenedCards = () => (cardsPropertiesNew.filter(card => card.opened));\n\n  const areOpenedCardsEqual = () => {\n    const openedCards = getOpenedCards();\n    return openedCards[0].hiddenValue === openedCards[1].hiddenValue;\n  };\n\n  return (\n    <main id = \"cardsContainer\">\n      <div id = \"innerContainer\">\n      <Timer timerValue = {props.timerValue}/>\n        {cardsProperties.map((cardProperties, index) =>(\n          <Card\n            key = {index}\n            cardProperties = {cardProperties}\n            onClick = {(id) => cardOnClick(id)}\n            numberOfCards = {30}\n          />\n        ))}\n       </div>\n     </main>\n   )\n }\n\nconst App = () => {\n  const [isButtonEnabled, setButtonEnabled] = useState(false);\n  const [isDifficultyVisible, setDifficultyVisible] = useState(true);\n  const [numberOfCards, setNumberOfCards] = useState(0);\n  const [timeOfStart, setTimeOfStart] = useState(new Date());\n  const [timerIsActive, setTimerIsActive] = useState(false);\n  const [timerValue, setTimerValue] = useState('00:00');\n\nuseEffect(() => {\n  if(timerIsActive) {\n  const timerId = setTimeout(() => {\n    const secondsForTimer = Math.round(((new Date()) - timeOfStart)/1000);\n    let minutes = Math.floor(secondsForTimer / 60);\n    if (minutes < 10) minutes = `0${minutes}`;\n    let seconds = secondsForTimer % 60;\n    if (seconds < 10) seconds = `0${seconds}`;\n    setTimerValue(`${minutes}:${seconds}`);\n  }, 1000);\nreturn () => clearTimeout(timerId);\n}});\n\n  return (\n    <>\n      {numberOfCards===12?\n        (<CardsContainer12 timerValue = {timerValue} setTimerIsActive = {setTimerIsActive}/>):\n        numberOfCards===20?\n          (<CardsContainer20 timerValue = {timerValue} setTimerIsActive = {setTimerIsActive}/>):\n            numberOfCards===30?\n            (<CardsContainer30 timerValue = {timerValue} setTimerIsActive = {setTimerIsActive}/>):\n            <></>\n      }\n      <ChooseDifficulty \n        difficultyOnChange = {()=> setButtonEnabled(true)}\n        isButtonEnabled = {isButtonEnabled}\n        isDifficultyVisible = {isDifficultyVisible}\n        buttonOnClick = {() => {\n          setDifficultyVisible(false);\n          setNumberOfCards(parseInt(document.querySelector('input[name=\"difficulty\"]:checked').value, 10));\n          setTimeOfStart(new Date());\n          setTimerIsActive(true);\n        }}\n      />\n    </> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}